#!/usr/bin/env bash

. "$CARGO_HOME/env"

# This script returns all the build information available *BEFORE* having to run the build
# So you get a summary of data such as git repo, package name, rustc version, etc...
# but you will not get the runtime, its hash, etc...

VERSION=`cat /srtool/VERSION || echo 0.0.0`
RUSTCV=`rustc -V`
PROFILE="${PROFILE:-release}"

cd /build/

if git describe --all > /dev/null 2>&1; then
    SRC='git'
    GIT_TAG=`git describe --tags --abbrev=0 > /dev/null 2>&1;`
    GIT_COMMIT_REF=`git rev-parse HEAD`
    GIT_BRANCH=`git rev-parse --abbrev-ref HEAD`
else
    SRC='zip'
fi

# We use the Cargo.lock to benefit from workspace version inheritance when appropriate
CARGO_VERSION=`toml get Cargo.lock . | jq -r '.package[] | select(.name == "'"$PACKAGE"'") | .version'`

if [[ "$CARGO_VERSION" =~ 'workspace' ]]; then
    :
fi

JSON=$( jq -n \
    --arg gen "srtool" \
    --arg version "$VERSION" \
    --arg rustc "$RUSTCV" \
    --arg pkg "$PACKAGE" \
    --arg profile "$PROFILE" \
    --arg git_tag "$GIT_TAG" \
    --arg git_commit_ref "$GIT_COMMIT_REF" \
    --arg git_branch "$GIT_BRANCH" \
    --arg cargo_version "$CARGO_VERSION" \
    --arg src "$SRC" \
    '{
        generator: {
            name: $gen,
            version: $version
        },
        src: $src,
        version: $cargo_version,
        git: {
            commit: $git_commit_ref,
            tag: $git_tag,
            branch: $git_branch,
        },
        rustc: $rustc,
        pkg: $pkg,
        profile: $profile,
    }' )

echo "$JSON" | jq $@
