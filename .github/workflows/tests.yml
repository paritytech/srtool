name: Build & Tests
on:
  push:
    branches:
      - master
    tags:
      - "!v*"

  pull_request:

  workflow_dispatch:

  schedule:
    - cron: "00 05 * * 1" # 5AM weekly on mondays

jobs:
  build:
    name: Build Srtool Docker image
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Build image
        run: |
          SRTOOL_VERSION=$(cat VERSION)
          RUSTC_VERSION=$(cat RUSTC_VERSION)
          echo Building tag $RUSTC_VERSION:$SRTOOL_VERSION
          echo "SRTOOL_VERSION=$SRTOOL_VERSION" >> $GITHUB_ENV
          echo "RUSTC_VERSION=$RUSTC_VERSION" >> $GITHUB_ENV
          docker --version
          docker build $@ --build-arg RUSTC_VERSION=$RUSTC_VERSION -t srtool .
          docker run -t --rm srtool version -cM

      - name: Export docker image
        run: |
          docker save srtool | gzip > srtool.tar.gz

      - name: Cache the image
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3.0.11
        with:
          key: srtool-docker-image-${{ github.sha }}
          path: |
            srtool.tar.gz

  common:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: false
    steps:
      - name: Cache the image
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3.0.11
        with:
          key: srtool-docker-image-${{ github.sha }}
          path: |
            srtool.tar.gz

      - name: Load Docker image
        run: |
          docker load -i srtool.tar.gz
          docker images --digests

      - name: Check the version
        run: |
          VERSION=$(docker run -t --rm srtool version -cM)
          if [[ \
            $( echo $VERSION | jq .name -cMr | wc -c ) -le 5 ||
            $( echo $VERSION | jq .version -cMr | wc -c ) -le 5 ||
            $( echo $VERSION | jq .rustc -cMr | wc -c ) -le 5 \
            ]] ; then
            echo "Invalid version output"
            exit 1
          else
            echo $VERSION
          fi

  container-structure-test:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: false
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Show files
        run: |
          ls -al

      - name: Cache the image
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3.0.11
        with:
          key: srtool-docker-image-${{ github.sha }}
          path: |
            srtool.tar.gz

      - name: Install tooling
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 && \
            chmod +x container-structure-test-linux-amd64 && \
            mkdir -p $HOME/bin && \
            export PATH=$PATH:$HOME/bin && \
            mv container-structure-test-linux-amd64 $HOME/bin/container-structure-test
          echo "Installed version:"
          container-structure-test version

      - name: Load Docker image
        run: |
          docker load -i srtool.tar.gz
          docker images --digests

      - name: Run the tests
        run: |
          export PATH=$PATH:$HOME/bin
          TESTS=$(find tests -type f | sed -e 's/^/ --config /g' | tr -d '\n')
          echo "Running tests:"
          find tests -type f
          container-structure-test test --image srtool --verbosity info ${TESTS}

  polkadot:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        chain: ["polkadot", "kusama", "westend"]
    steps:
      - name: Cache the image
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3.0.11
        with:
          key: srtool-docker-image-${{ github.sha }}
          path: |
            srtool.tar.gz

      - name: Load Docker image
        run: |
          docker load -i srtool.tar.gz
          docker images --digests

      - name: Check out the Polkadot repo
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        with:
          repository: paritytech/polkadot
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 0
          path: polkadot

      - name: Run srtool info
        env:
          PACKAGE: ${{ matrix.chain }}-runtime
          RUNTIME_DIR: runtime/${{ matrix.chain }}
        working-directory: polkadot
        run: |
          INFO=$(docker run --rm -i \
            -e PACKAGE=$PACKAGE \
            -e RUNTIME_DIR=$RUNTIME_DIR \
            -v "${PWD}":/build \
            srtool info -cM)

          if [ $( echo $INFO | jq .src -r ) != "git"  ] ; then
            echo Invalid info output, got $( echo $INFO | jq .src -r )
            exit 1
          else
            echo $INFO
          fi

      - name: Run some debug
        env:
          PACKAGE: ${{ matrix.chain }}-runtime
          RUNTIME_DIR: runtime/${{ matrix.chain }}
        working-directory: polkadot
        run: |
          ls -al runtime || true
          ls -al runtime/${{ matrix.chain }} || true
          id -u runner || true
          id -g runner || true
          id -u docker || true
          docker info --format "{{ .ClientInfo.Context }}"

      - name: Run srtool build for ${{ matrix.chain }}
        id: srtool_build
        env:
          PACKAGE: ${{ matrix.chain }}-runtime
          RUNTIME_DIR: runtime/${{ matrix.chain }}
        working-directory: polkadot
        run: |
          CMD="docker run --rm -i \
            -e PACKAGE=$PACKAGE \
            -e RUNTIME_DIR=$RUNTIME_DIR \
            -v ${PWD}:/build \
            srtool build --app --json"
          echo ::debug::build::docker_run $CMD
          stdbuf -oL $CMD | {
            while IFS= read -r line
            do
              echo ║ $line
              JSON="$line"
            done

            echo "json=$JSON" >> $GITHUB_OUTPUT
            echo "JSON=$JSON" >> $GITHUB_ENV

            echo $JSON | jq .

            WASM=`echo $JSON | jq -r .runtimes.compact.wasm`
            echo "wasm=$WASM" >> $GITHUB_OUTPUT

            Z_WASM=`echo $JSON | jq -r .runtimes.compressed.wasm`
            echo "wasm_compressed=$Z_WASM" >> $GITHUB_OUTPUT
          }

      - name: Summary for ${{ matrix.chain }}
        run: |
          echo $JSON | jq . | tee ${{ matrix.chain }}-srtool-digest.json
          echo "Compact Runtime: ${{ steps.srtool_build.outputs.wasm }}"
          echo "Compressed Runtime: ${{ steps.srtool_build.outputs.wasm_compressed }}"

      - name: Archive Artifacts for ${{ matrix.chain }}
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        env:
          RUNTIME_DIR: runtime/${{ matrix.chain }}
        with:
          name: ${{ matrix.chain }}-runtime
          path: |
            $RUNTIME_DIR/${{ steps.srtool_build.outputs.wasm }}
            $RUNTIME_DIR/${{ steps.srtool_build.outputs.wasm_compressed }}
            ${{ matrix.chain }}-srtool-digest.json

  cumulus:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - category: contracts
            runtime: contracts-rococo
          - category: assets
            runtime: statemint
          - category: starters
            runtime: shell
    steps:
      - name: Cache the image
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3.0.11
        with:
          key: srtool-docker-image-${{ github.sha }}
          path: |
            srtool.tar.gz

      - name: Load Docker image
        run: |
          docker load -i srtool.tar.gz
          docker images --digests

      - name: Check out the Cumulus repo
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        with:
          repository: paritytech/cumulus
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 0
          path: cumulus

      - name: Run srtool info
        env:
          PACKAGE: ${{ matrix.runtime }}-runtime
          RUNTIME_DIR: parachains/runtimes/${{ matrix.category }}/${{ matrix.runtime }}
        working-directory: cumulus
        run: |
          INFO=$(docker run --rm -i \
            -e PACKAGE=$PACKAGE \
            -e RUNTIME_DIR=$RUNTIME_DIR \
            -v "${PWD}":/build \
            srtool info -cM)

          if [ $( echo $INFO | jq .src -r ) != "git"  ] ; then
            echo Invalid info output, got $( echo $INFO | jq .src -r )
            exit 1
          else
            echo $INFO
          fi

      - name: Run srtool build for ${{ matrix.runtime }}
        id: srtool_build
        env:
          PACKAGE: ${{ matrix.runtime }}-runtime
          RUNTIME_DIR: parachains/runtimes/${{ matrix.category }}/${{ matrix.runtime }}
        working-directory: cumulus
        run: |
          CMD="docker run --rm -i \
            -e PACKAGE=$PACKAGE \
            -e RUNTIME_DIR=$RUNTIME_DIR \
            -v ${PWD}:/build \
            srtool build --app --json"
          echo ::debug::build::docker_run $CMD
          stdbuf -oL $CMD | {
            while IFS= read -r line
            do
              echo ║ $line
              JSON="$line"
            done

            echo "json=$JSON" >> $GITHUB_OUTPUT
            echo "JSON=$JSON" >> $GITHUB_ENV

            echo $JSON | jq .

            WASM=`echo $JSON | jq -r .runtimes.compact.wasm`
            echo "wasm=$WASM" >> $GITHUB_OUTPUT

            Z_WASM=`echo $JSON | jq -r .runtimes.compressed.wasm`
            echo "wasm_compressed=$Z_WASM" >> $GITHUB_OUTPUT
          }

      - name: Summary for ${{ matrix.runtime }}
        run: |
          echo $JSON | jq . | tee ${{ matrix.runtime }}-srtool-digest.json
          echo "Compact Runtime: ${{ steps.srtool_build.outputs.wasm }}"
          echo "Compressed Runtime: ${{ steps.srtool_build.outputs.wasm_compressed }}"

      - name: Archive Artifacts for ${{ matrix.runtime }}
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        env:
          RUNTIME_DIR: parachains/runtimes/${{ matrix.category }}/${{ matrix.runtime }}
        with:
          name: ${{ matrix.runtime }}-runtime
          path: |
            $RUNTIME_DIR/${{ steps.srtool_build.outputs.wasm }}
            $RUNTIME_DIR/${{ steps.srtool_build.outputs.wasm_compressed }}
            ${{ matrix.runtime }}-srtool-digest.json

  bridges:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        chain: ["millau", "rialto"]
    steps:
      - name: Cache the image
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3.0.11
        with:
          key: srtool-docker-image-${{ github.sha }}
          path: |
            srtool.tar.gz

      - name: Load Docker image
        run: |
          docker load -i srtool.tar.gz
          docker images --digests

      - name: Check out the Bridges repo
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        with:
          repository: paritytech/parity-bridges-common
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 0
          path: bridges

      - name: Run srtool info
        env:
          PACKAGE: ${{ matrix.chain }}-runtime
          RUNTIME_DIR: bin/${{ matrix.chain }}/runtime
        working-directory: bridges
        run: |
          INFO=$(docker run --rm -i \
            -e PACKAGE=$PACKAGE \
            -e RUNTIME_DIR=$RUNTIME_DIR \
            -v "${PWD}":/build \
            srtool info -cM)

          if [ $( echo $INFO | jq .src -r ) != "git"  ] ; then
            echo Invalid info output, got $( echo $INFO | jq .src -r )
            exit 1
          else
            echo $INFO
          fi

      - name: Run srtool build for ${{ matrix.chain }}
        id: srtool_build
        env:
          PACKAGE: ${{ matrix.chain }}-runtime
          RUNTIME_DIR: bin/${{ matrix.chain }}/runtime
        working-directory: bridges
        run: |
          CMD="docker run --rm -i \
            -e PACKAGE=$PACKAGE \
            -e RUNTIME_DIR=$RUNTIME_DIR \
            -v ${PWD}:/build \
            srtool build --app --json"
          echo ::debug::build::docker_run $CMD
          stdbuf -oL $CMD | {
            while IFS= read -r line
            do
              echo ║ $line
              JSON="$line"
            done

            echo "json=$JSON" >> $GITHUB_OUTPUT
            echo "JSON=$JSON" >> $GITHUB_ENV

            echo $JSON | jq .

            WASM=`echo $JSON | jq -r .runtimes.compact.wasm`
            echo "wasm=$WASM" >> $GITHUB_OUTPUT

            Z_WASM=`echo $JSON | jq -r .runtimes.compressed.wasm`
            echo "wasm_compressed=$Z_WASM" >> $GITHUB_OUTPUT
          }

      - name: Summary for ${{ matrix.chain }}
        run: |
          echo $JSON | jq . | tee ${{ matrix.chain }}-srtool-digest.json
          echo "Compact Runtime: ${{ steps.srtool_build.outputs.wasm }}"
          echo "Compressed Runtime: ${{ steps.srtool_build.outputs.wasm_compressed }}"

      - name: Archive Artifacts for ${{ matrix.chain }}
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        env:
          RUNTIME_DIR: bin/${{ matrix.chain }}/runtime
        with:
          name: ${{ matrix.chain }}-runtime
          path: |
            $RUNTIME_DIR/${{ steps.srtool_build.outputs.wasm }}
            $RUNTIME_DIR/${{ steps.srtool_build.outputs.wasm_compressed }}
            ${{ matrix.chain }}-srtool-digest.json
